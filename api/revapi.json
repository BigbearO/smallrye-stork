[ {
  "extension" : "revapi.java",
  "id" : "java",
  "configuration" : {
    "missing-classes" : {
      "behavior" : "report",
      "ignoreMissingAnnotations" : false
    }
  }
}, {
  "extension" : "revapi.filter",
  "configuration" : {
    "elements" : {
      "include" : [ {
        "matcher" : "java-package",
        "match" : "/io\\.smallrye\\.stork\\.api(\\..*)?/"
      }, {
        "matcher" : "java-package",
        "match" : "/io\\.smallrye\\.stork\\.api(\\..*)?/"
      } ]
    }
  }
}, {
  "extension" : "revapi.differences",
  "id" : "breaking-changes",
  "configuration" : {
    "criticality" : "highlight",
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "differences" : [
      {
        "ignore": true,
        "code": "java.method.addedToInterface",
        "new": "method java.util.Optional<java.lang.String> io.smallrye.stork.api.ServiceInstance::getPath()",
        "justification": "New method to handle API gateways"
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.stork.api.Service::<init>(java.lang.String, io.smallrye.stork.api.LoadBalancer, io.smallrye.stork.api.ServiceDiscovery, boolean)",
        "new": "method void io.smallrye.stork.api.Service::<init>(java.lang.String, io.smallrye.stork.api.LoadBalancer, io.smallrye.stork.api.ServiceDiscovery, io.smallrye.stork.api.ServiceRegistrar, boolean)",
        "justification": "Service Registrar is now part of the Service"
      },
      {
        "ignore": true,
        "code": "java.method.addedToInterface",
        "new": "method io.smallrye.stork.api.config.ConfigWithType io.smallrye.stork.api.config.ServiceConfig::serviceRegistrar()",
        "justification": "Registrar included in the service configuration"
      },
      {
        "ignore": true,
        "code": "java.method.removed",
        "old": "method java.util.List<io.smallrye.stork.api.config.ServiceRegistrarConfig> io.smallrye.stork.spi.config.ConfigProvider::getRegistrarConfigs()",
        "justification": "Registrar configuration is now part of configs"
      },
      {
        "ignore": true,
        "code": "java.method.parameterTypeChanged",
        "old": "parameter io.smallrye.stork.api.ServiceRegistrar<MetadataKeyType> io.smallrye.stork.spi.internal.ServiceRegistrarLoader<MetadataKeyType extends java.lang.Enum<MetadataKeyType> & io.smallrye.stork.api.MetadataKey>::createServiceRegistrar(===io.smallrye.stork.api.config.ServiceRegistrarConfig===, io.smallrye.stork.spi.StorkInfrastructure)",
        "new": "parameter io.smallrye.stork.api.ServiceRegistrar<MetadataKeyType> io.smallrye.stork.spi.internal.ServiceRegistrarLoader<MetadataKeyType extends java.lang.Enum<MetadataKeyType> & io.smallrye.stork.api.MetadataKey>::createServiceRegistrar(===io.smallrye.stork.api.config.ConfigWithType===, io.smallrye.stork.spi.StorkInfrastructure)",
        "parameterIndex": "0",
        "justification": "Use the ConfigWithType more generic type for registrars."
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method io.smallrye.stork.api.ServiceRegistrar<MetadataKeyType> io.smallrye.stork.spi.internal.ServiceRegistrarLoader<MetadataKeyType extends java.lang.Enum<MetadataKeyType> & io.smallrye.stork.api.MetadataKey>::createServiceRegistrar(io.smallrye.stork.api.config.ServiceRegistrarConfig, io.smallrye.stork.spi.StorkInfrastructure)",
        "new": "method io.smallrye.stork.api.ServiceRegistrar<MetadataKeyType> io.smallrye.stork.spi.internal.ServiceRegistrarLoader<MetadataKeyType extends java.lang.Enum<MetadataKeyType> & io.smallrye.stork.api.MetadataKey>::createServiceRegistrar(io.smallrye.stork.api.config.ConfigWithType, java.lang.String, io.smallrye.stork.spi.StorkInfrastructure)",
        "justification": "Service name is not needed anymore. It is present at Service config level."
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.stork.test.TestConfigProvider::addServiceConfig(java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)",
        "new": "method void io.smallrye.stork.test.TestConfigProvider::addServiceConfig(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>, boolean)",
        "justification": "Registrars are now part of configs"
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.stork.test.TestConfigProvider::addServiceConfig(java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>, boolean)",
        "new": "method void io.smallrye.stork.test.TestConfigProvider::addServiceConfig(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)",
        "justification": "Registrars are now part of configs"
      },
      {
        "ignore": true,
        "code": "java.method.removed",
        "old": "method void io.smallrye.stork.test.TestConfigProvider::addServiceRegistrarConfig(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>)",
        "justification": "Registrars are now part of configs"
      },
      {
        "ignore": true,
        "code": "java.method.removed",
        "old": "method java.util.List<io.smallrye.stork.api.config.ServiceRegistrarConfig> io.smallrye.stork.test.TestConfigProvider::getRegistrarConfigs()",
        "justification": "Registrars are now part of configs"
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.stork.test.TestConfigProviderBean::addServiceConfig(java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)",
        "new": "method void io.smallrye.stork.test.TestConfigProviderBean::addServiceConfig(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)",
        "justification": "Registrars are now part of configs"
      },
      {
        "ignore": true,
        "code": "java.method.removed",
        "old": "method void io.smallrye.stork.test.TestConfigProviderBean::addServiceRegistrarConfig(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>)",
        "justification": "Registrars are now part of configs"
      },
      {
        "ignore": true,
        "code": "java.method.removed",
        "old": "method java.util.List<io.smallrye.stork.api.config.ServiceRegistrarConfig> io.smallrye.stork.test.TestConfigProviderBean::getRegistrarConfigs()",
        "justification": "Registrars are now part of configs"
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method io.smallrye.stork.api.ServiceRegistrar<io.smallrye.stork.test.TestServiceRegistrarProvider.TestMetadata> io.smallrye.stork.test.TestServiceRegistrarProviderLoader::createServiceRegistrar(io.smallrye.stork.api.config.ServiceRegistrarConfig, io.smallrye.stork.spi.StorkInfrastructure)",
        "new": "method io.smallrye.stork.api.ServiceRegistrar<io.smallrye.stork.test.TestServiceRegistrarProvider.TestMetadata> io.smallrye.stork.test.TestServiceRegistrarProviderLoader::createServiceRegistrar(io.smallrye.stork.api.config.ConfigWithType, java.lang.String, io.smallrye.stork.spi.StorkInfrastructure)",
        "justification": "Use the ConfigWithType more generic type for registrars and service name."
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method io.smallrye.stork.api.ServiceDefinition io.smallrye.stork.api.ServiceDefinition::of(io.smallrye.stork.api.config.ConfigWithType, io.smallrye.stork.api.config.ConfigWithType)",
        "new": "method io.smallrye.stork.api.ServiceDefinition io.smallrye.stork.api.ServiceDefinition::of(io.smallrye.stork.api.config.ConfigWithType, io.smallrye.stork.api.config.ConfigWithType, io.smallrye.stork.api.config.ConfigWithType)",
        "justification": "Registrar included."
      }
    ]
  }
}, {
  "extension" : "revapi.reporter.json",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "target/compatibility.json",
    "indent" : true,
    "append" : false,
    "keepEmptyFile" : true
  }
}, {
  "extension" : "revapi.reporter.text",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "out"
  }
} ]