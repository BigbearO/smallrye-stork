[ {
  "extension" : "revapi.java",
  "id" : "java",
  "configuration" : {
    "missing-classes" : {
      "behavior" : "report",
      "ignoreMissingAnnotations" : false
    }
  }
}, {
  "extension" : "revapi.filter",
  "configuration" : {
    "elements" : {
      "include" : [ {
        "matcher" : "java-package",
        "match" : "/io\\.smallrye\\.stork\\.servicediscovery\\.kubernetes(\\..*)?/"
      } ]
    }
  }
}, {
  "extension" : "revapi.differences",
  "id" : "breaking-changes",
  "configuration" : {
    "criticality" : "highlight",
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "differences" : [
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscovery::<init>(java.lang.String, io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProviderConfiguration, io.vertx.core.Vertx, boolean)",
        "new": "method void io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscovery::<init>(java.lang.String, io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProviderConfiguration, io.vertx.core.Vertx)",
        "justification": "The 'secure' configuration is now passed as a part of the 'KubernetesServiceDiscoveryProviderConfiguration'. Should not impact users."
      },
      {
        "ignore": true,
        "code": "java.annotation.attributeValueChanged",
        "old": "class io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProvider",
        "new": "class io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProvider",
        "annotationType": "io.smallrye.stork.api.config.ServiceDiscoveryAttributes",
        "attribute": "value",
        "oldValue": "{@io.smallrye.stork.api.config.ServiceDiscoveryAttribute(name = \"k8s-host\", description = \"The Kubernetes API host.\"), @io.smallrye.stork.api.config.ServiceDiscoveryAttribute(name = \"k8s-namespace\", description = \"The namespace of the service. Use all to discover all namespaces.\"), @io.smallrye.stork.api.config.ServiceDiscoveryAttribute(name = \"application\", description = \"The Eureka application Id; if not defined Stork service name will be used.\"), @io.smallrye.stork.api.config.ServiceDiscoveryAttribute(name = \"refresh-period\", description = \"Service discovery cache refresh period.\", defaultValue = \"5M\")}",
        "newValue": "{@io.smallrye.stork.api.config.ServiceDiscoveryAttribute(name = \"k8s-host\", description = \"The Kubernetes API host.\"), @io.smallrye.stork.api.config.ServiceDiscoveryAttribute(name = \"k8s-namespace\", description = \"The namespace of the service. Use all to discover all namespaces.\"), @io.smallrye.stork.api.config.ServiceDiscoveryAttribute(name = \"application\", description = \"The Eureka application Id; if not defined Stork service name will be used.\"), @io.smallrye.stork.api.config.ServiceDiscoveryAttribute(name = \"refresh-period\", description = \"Service discovery cache refresh period.\", defaultValue = \"5M\"), @io.smallrye.stork.api.config.ServiceDiscoveryAttribute(name = \"secure\", description = \"Whether the connection with the service should be encrypted with TLS.\")}",
        "justification": "Added the 'secure' attribute. Should not impact users."
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscovery::<init>(java.lang.String, io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProviderConfiguration, io.vertx.core.Vertx, boolean)",
        "new": "method void io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscovery::<init>(java.lang.String, io.smallrye.stork.servicediscovery.kubernetes.KubernetesConfiguration, io.vertx.core.Vertx)",
        "justification": "The generated KubernetesServiceDiscoveryProviderConfiguration has been renamed to KubernetesConfiguration"
      },
      {
        "ignore": true,
        "code": "java.method.parameterTypeChanged",
        "old": "parameter io.smallrye.stork.api.ServiceDiscovery io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProvider::createServiceDiscovery(===io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProviderConfiguration===, java.lang.String, io.smallrye.stork.api.config.ServiceConfig, io.smallrye.stork.spi.StorkInfrastructure)",
        "new": "parameter io.smallrye.stork.api.ServiceDiscovery io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProvider::createServiceDiscovery(===io.smallrye.stork.servicediscovery.kubernetes.KubernetesConfiguration===, java.lang.String, io.smallrye.stork.api.config.ServiceConfig, io.smallrye.stork.spi.StorkInfrastructure)",
        "parameterIndex": "0",
        "justification": "The generated KubernetesServiceDiscoveryProviderConfiguration has been renamed to KubernetesConfiguration"
      },
      {
        "ignore": true,
        "code": "java.class.noLongerImplementsInterface",
        "old": "class io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProvider",
        "new": "class io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProvider",
        "interface": "io.smallrye.stork.spi.ServiceDiscoveryProvider<io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProviderConfiguration>",
        "justification": "The generated KubernetesServiceDiscoveryProviderConfiguration has been renamed to KubernetesConfiguration"
      },
      {
        "ignore": true,
        "code": "java.class.superTypeTypeParametersChanged",
        "old": "class io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProvider",
        "new": "class io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProvider",
        "oldSuperType": "io.smallrye.stork.spi.ServiceDiscoveryProvider<io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProviderConfiguration>",
        "newSuperType": "io.smallrye.stork.spi.ServiceDiscoveryProvider<io.smallrye.stork.servicediscovery.kubernetes.KubernetesConfiguration>",
        "justification": "The generated KubernetesServiceDiscoveryProviderConfiguration has been renamed to KubernetesConfiguration"
      },
      {
        "ignore": true,
        "code": "java.class.removed",
        "old": "class io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscoveryProviderConfiguration",
        "justification": "The generated KubernetesServiceDiscoveryProviderConfiguration has been renamed to KubernetesConfiguration"
      },
      {
        "ignore": true,
        "code": "java.method.parameterTypeChanged",
        "old": "parameter void io.smallrye.stork.api.ServiceDiscovery::initialize(===java.util.Map<java.lang.String, io.smallrye.stork.api.Service>===) @ io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscovery",
        "new": "parameter void io.smallrye.stork.api.ServiceDiscovery::initialize(===io.smallrye.stork.api.StorkServiceRegistry===) @ io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscovery",
        "parameterIndex": "0",
        "justification": "The initialize method now receives the Stork instance"
      },
      {
        "ignore": true,
        "code": "java.field.visibilityReduced",
        "old": "field io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscovery.METADATA_NAME",
        "new": "field io.smallrye.stork.servicediscovery.kubernetes.KubernetesServiceDiscovery.METADATA_NAME",
        "oldVisibility": "public",
        "newVisibility": "package",
        "justification": "Reduce the visibility of this internal method, instances should be created using the ServiceDiscoveryProvider"
      }
    ]
  }
}, {
  "extension" : "revapi.reporter.json",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "target/compatibility.json",
    "indent" : true,
    "append" : false,
    "keepEmptyFile" : true
  }
}, {
  "extension" : "revapi.reporter.text",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "out"
  }
} ]